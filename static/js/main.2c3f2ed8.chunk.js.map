{"version":3,"sources":["components/shares/footer.tsx","models/candidate.model.tsx","stores/candidate.store.tsx","services/api-services/candidate.service.ts","components/shares/candidate-form.tsx","components/shares/top-navigation.tsx","components/main.component.tsx","models/vacancie.model.ts","stores/vacancie.store.ts","services/api-services/vacancie.services.ts","components/vacancie/vacancies.list.tsx","components/vacancie/vacancies.component.tsx","components/vacancie/vacancie.item.tsx","components/admin/auth-provider.tsx","components/admin/vacancie.tsx","components/admin/candidates.tsx","components/admin/admin.component.tsx","components/router.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","React","Component","CandidateItem","types","model","fullName","optional","string","telephone","email","vacancie","cvLink","testTaskLink","howKnow","message","actions","self","setName","newFullName","console","log","setTelephone","newTelephone","setEmail","newEmail","setVacancie","newVacancie","setCvLink","newCvLink","setTestTaskLink","newTestTaskLink","setHowKnow","newHowKnow","setMessage","newMessage","service","path","body","axios","post","this","candidate","data","candidateStore","candidates","array","create","e","nameInput","phoneInput","emailInput","vacancieInput","cvLinkInput","testTaskLinkInput","howKnowInput","messageInput","preventDefault","alert","candidateModel","CandidateForm","observer","type","placeholder","value","onChange","target","onClick","TopNavigation","exact","to","activeClassName","Main","VacancieItem","id","identifierNumber","title","description","category","imagePath","volatile","image","setTitle","newTitle","setDescription","newDescription","setCategory","newCategory","setImage","file","setDefaultValues","token","localStorage","getItem","get","vacancies","headers","put","delete","deletedVacancie","vacancieModel","vacanciesStore","getAllVacancies","getAll","result","createVacancie","inputTitle","inputDescription","inputCategory","inputFile","window","FormData","append","editVacancie","vacancieId","edit","views","vacanciesFilter","items","activeClass","i","length","innerText","classList","add","remove","unprotect","VacanciesList","document","querySelectorAll","map","key","src","alt","toLowerCase","Vacancies","Vacancie","props","match","params","toString","undefined","login","username","password","then","res","error","status","Error","setItem","Promise","resolve","logout","removeItem","checkError","reject","checkAuth","getPermissions","VacancieList","List","Datagrid","TextField","source","EditButton","VacancieEdit","name","files","VacancieCreate","CandidateList","dataProvider","jsonServerProvider","url","options","Headers","Accept","set","fetchUtils","fetchJson","AdminComponent","Admin","authProvider","Resource","list","icon","PostIcon","UserIcon","RouterComponent","component","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2c3f2ed8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class Footer extends React.Component{\r\n    render(){\r\n        return <div className = \"footer\">\r\n            <h3>+38 066 614 64 68</h3>\r\n            <h3>Адрес: ул. Рымарская 22, Харьков, Украина</h3>\r\n            <p>RemotEmployees 2018-2020 © All rights reserved</p>\r\n        </div>\r\n    }\r\n}","import { types } from \"mobx-state-tree\";\r\n\r\nexport const CandidateItem = types.model({\r\n    fullName: types.optional( types.string, \"asd\" ),\r\n    telephone: types.optional( types.string, \"123\" ),\r\n    email: types.optional( types.string, \"asd\" ),\r\n    vacancie: types.optional( types.string, \"asd\" ),\r\n    cvLink: types.optional( types.string, \"asd\" ),\r\n    testTaskLink: types.optional( types.string, \"asd\" ),\r\n    howKnow: types.optional( types.string, \"asd\" ),\r\n    message: types.optional( types.string, \"\" )\r\n})\r\n.actions( self => ({\r\n    setName( newFullName ){\r\n        self.fullName = newFullName;\r\n        console.log(self.fullName);\r\n    },\r\n\r\n    setTelephone( newTelephone ){\r\n        self.telephone = newTelephone;\r\n    },\r\n\r\n    setEmail( newEmail ){\r\n        self.email = newEmail;\r\n    },\r\n\r\n    setVacancie( newVacancie ){\r\n        self.vacancie = newVacancie;\r\n        console.log(self.vacancie);\r\n    },\r\n\r\n    setCvLink( newCvLink ){\r\n        self.cvLink = newCvLink;\r\n    },\r\n\r\n    setTestTaskLink( newTestTaskLink ){\r\n        self.testTaskLink = newTestTaskLink;\r\n    },\r\n\r\n    setHowKnow( newHowKnow ){\r\n        self.howKnow = newHowKnow;\r\n    },\r\n\r\n    setMessage( newMessage ){\r\n        self.message = newMessage;\r\n    }\r\n}));","import { types } from 'mobx-state-tree';\r\nimport { CandidateItem } from '../models/candidate.model';\r\nimport { CandidateService } from \"../services/api-services/candidate.service\";\r\n\r\nconst service: CandidateService = new CandidateService();\r\n\r\nconst CandidateList = types.model({\r\n    candidates: types.array( CandidateItem )\r\n})\r\n.actions( self => ({\r\n    async create( e, nameInput, phoneInput, emailInput, vacancieInput, cvLinkInput,\r\n    testTaskLinkInput, howKnowInput, messageInput ){\r\n        e.preventDefault();\r\n\r\n        const body = {\r\n            fullName: nameInput,\r\n            telephone: phoneInput,\r\n            email: emailInput,\r\n            vacancie: vacancieInput,\r\n            cvLink: cvLinkInput,\r\n            testTaskLink: testTaskLinkInput,\r\n            howKnow: howKnowInput,\r\n            message: messageInput\r\n        }\r\n        let result = await service.create( body );\r\n        debugger;\r\n        result.fullName ? alert(\"Спасибо, мы с вами свяжемся в ближайшее время\") : alert( \"Что-то не так, попробуйте ещё раз\" );\r\n    }\r\n}))\r\n\r\nexport const candidateStore = CandidateList.create({});\r\nexport const candidateModel = CandidateItem.create({});","import axios from 'axios';\r\n\r\nexport class CandidateService{\r\n\r\n    private path = \"http://localhost:5000/candidates\";\r\n\r\n    public async create( body ){\r\n        try{\r\n            let candidate = await axios.post( this.path, body );\r\n            return candidate.data;\r\n        }\r\n        catch( error ){\r\n            return error;\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport { candidateModel, candidateStore } from \"../../stores/candidate.store\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class CandidateForm extends React.Component{\r\n    render(){\r\n        return <div className = \"candidate-form\">\r\n            <h2>Откликнуться на вакансию</h2>\r\n            <p>заполните форму для подачи заявки</p>\r\n            <form className = \"candidate-form\">\r\n                <div>\r\n                    <input type = \"text\" placeholder = \"ФИО\" value = { candidateModel.fullName }\r\n                    onChange = { e => candidateModel.setName( e.target.value )}/>\r\n\r\n                    <input type = \"phone\" placeholder = \"Телефон\" value = { candidateModel.telephone } \r\n                    onChange = { e => candidateModel.setTelephone( e.target.value )}/>\r\n                </div>\r\n                <input type = \"email\" placeholder = \"Email\" value = { candidateModel.email }\r\n                onChange = { e => candidateModel.setEmail( e.target.value )}/>\r\n\r\n                <select value = { candidateModel.vacancie }\r\n                onChange = { e => candidateModel.setVacancie( e.target.value )}>\r\n                    <option>Angular Developer</option>\r\n                    <option>Designer</option>\r\n                    <option>Marketologist</option>\r\n                    <option>Frontend Developer</option>\r\n                </select>\r\n\r\n                <input type = \"text\" placeholder = \"Ссылка на резюме\" value = { candidateModel.cvLink }\r\n                onChange = { e => candidateModel.setCvLink( e.target.value )}/>\r\n\r\n                <input type = \"text\" placeholder = \"Ссылка на тестовое задание\" value = { candidateModel.testTaskLink }\r\n                onChange = { e => candidateModel.setTestTaskLink( e.target.value )}/>\r\n\r\n                <input type = \"text\" placeholder = \"Как вы о нас узнали?\" value = { candidateModel.howKnow }\r\n                onChange = { e => candidateModel.setHowKnow( e.target.value )}/>\r\n\r\n                <input type = \"text\" placeholder = \"Оставьте сообщение\" value = { candidateModel.message }\r\n                onChange = { e => candidateModel.setMessage( e.target.value )}/>\r\n\r\n                <input type = \"submit\" value = \"ОТПРАВИТЬ\" className = \"send-button\"\r\n                 onClick = { e => candidateStore.create( e, candidateModel.fullName, candidateModel.telephone, candidateModel.email,candidateModel.vacancie, \r\n                 candidateModel.cvLink,candidateModel.testTaskLink, candidateModel.howKnow, candidateModel.message ) }/>\r\n            </form>\r\n        </div>\r\n    }\r\n}","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport class TopNavigation extends React.Component{\r\n    render(){\r\n        return  <div className = \"top\">\r\n            <div className = \"navigation\">\r\n                <NavLink exact to = \"/\" className = \"link\" activeClassName = \"activeLink\">Main</NavLink>\r\n                <NavLink to = \"/vacancies\" className = \"link\" activeClassName = \"activeLink\">Vacancies</NavLink>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Footer } from './shares/footer';\r\nimport { CandidateForm } from './shares/candidate-form';\r\nimport { TopNavigation } from './shares/top-navigation';\r\n\r\nexport class Main extends React.Component{\r\n    render(){\r\n        return <div>\r\n            <TopNavigation/>\r\n            <section className = \"main\">\r\n                <div>\r\n                    <p>REMOTE STAFF<br/><span>NEEDED</span></p>\r\n                </div>\r\n                <p>Компании 2 года.<br/>\r\n                    100+ сотрудников.<br/>\r\n                    40+ международных проектов.<br/>\r\n                    Первая сотрудница все еще работает у нас.<br/>\r\n                    Первые клиенты все еще работают с нами.<br/>\r\n                    <span>Наши сотрудники работают из 6 городов Украины</span></p>\r\n                    <NavLink className = \"link\" to = \"/vacancies\">Посмотреть вакансии</NavLink>\r\n            </section>\r\n            <section className = \"how\">\r\n                <h1>Как получить работу?</h1>\r\n            </section>\r\n            <section className = \"advantages\">\r\n                <h1>ПРЕИМУЩЕСТВА РАБОТЫ С НАМИ</h1>\r\n                <ul>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                </ul>\r\n            </section>\r\n            <section className = \"areas-we-work\">\r\n                <h1>В каких сферах мы работаем</h1>\r\n                <p>Выбери подходящее для себя направление и начни работать уже завтра!</p>\r\n            </section>\r\n            <section className = \"about-us\">\r\n                <h1>ЕЩЁ НЕМНОГО О НАС</h1>\r\n            </section>\r\n            <section className = \"join\">\r\n                <h1>ГОТОВ ПРИСОЕДИНИТЬСЯ?</h1>\r\n                <CandidateForm/>\r\n            </section>\r\n            <Footer/>\r\n        </div>\r\n    }\r\n}","import { types } from \"mobx-state-tree\";\r\n\r\nexport const VacancieItem = types.model({\r\n    id: types.identifierNumber,\r\n    title: types.optional( types.string, \"\" ),\r\n    description: types.optional( types.string, \"\" ),\r\n    category: types.optional( types.string, \"Web development\" ),\r\n    imagePath: types.optional( types.string, \"\" )\r\n})\r\n.volatile(() => ({\r\n    image: null\r\n  }))\r\n.actions( self => ({\r\n    setTitle( newTitle ){\r\n        self.title = newTitle;\r\n    },\r\n    \r\n    setDescription( newDescription ){\r\n        self.description = newDescription;\r\n    },\r\n\r\n    setCategory( newCategory ){\r\n        self.category = newCategory;\r\n    },\r\n\r\n    setImage( file ) {\r\n        self.image = file;\r\n    },\r\n\r\n    setDefaultValues(){\r\n        self.title = \"\";\r\n        self.description = \"\";\r\n        self.category = \"Web development\";\r\n    }\r\n}))","import { types, unprotect } from 'mobx-state-tree';\r\nimport { VacancieItem } from '../models/vacancie.model';\r\nimport { VacancieService } from '../services/api-services/vacancie.services';\r\n\r\nconst service: VacancieService = new VacancieService();\r\n\r\nexport const vacancieModel = VacancieItem.create({ \r\n    id: 0\r\n});\r\n\r\nconst VacancieList = types.model({\r\n    vacancies: types.array( VacancieItem ),\r\n    category: types.optional( types.string, \"\" )\r\n})\r\n.actions( self => ({\r\n    async getAllVacancies(){\r\n        let result = await service.getAll();\r\n        result.message ? alert( \"Что-то не так, перезагрузите сайт\" ) : self.vacancies = result;\r\n    },\r\n\r\n    async createVacancie( e, inputTitle, inputDescription, inputCategory, inputFile ){\r\n        e.preventDefault();\r\n\r\n        let data = new window.FormData();\r\n        data.append(\"title\", inputTitle);\r\n        data.append(\"description\", inputDescription);\r\n        data.append(\"category\", inputCategory);\r\n        data.append(\"image\", inputFile);\r\n\r\n        let result = await service.create( data );\r\n        result.title ? alert( \"Запись успешно добавлена\" ) : alert( \"Ошибка, попробуйте ещё\" );\r\n\r\n        vacancieModel.setDefaultValues();\r\n    },\r\n\r\n    async editVacancie( e, vacancieId, inputTitle, inputDescription, inputCategory, inputFile ){\r\n        e.preventDefault();\r\n\r\n        let data = new window.FormData();\r\n        data.append(\"title\", inputTitle);\r\n        data.append(\"description\", inputDescription);\r\n        data.append(\"category\", inputCategory);\r\n        data.append(\"image\", inputFile);\r\n\r\n        let result = await service.edit( vacancieId, data );\r\n        result.title ? alert( \"Запись успешно изменена\" ) : alert( \"Ошибка, попробуйте ещё\" );\r\n\r\n        vacancieModel.setDefaultValues();\r\n    }\r\n}))\r\n.views( self => ({\r\n    vacanciesFilter( e, category, items, activeClass ){\r\n        self.category = category;\r\n        for( let i = 0; i < items.length; i++ )\r\n        {\r\n            if( items[i].innerText === e.target.innerText )\r\n            items[i].classList.add( activeClass );\r\n            else\r\n            items[i].classList.remove( activeClass );   \r\n        }\r\n    }\r\n}))\r\n\r\nexport const vacanciesStore = VacancieList.create({});\r\nunprotect( vacanciesStore );","import axios from 'axios';\r\n\r\nexport class VacancieService{\r\n\r\n    private path = \"http://localhost:5000/vacancies\";\r\n    private token = localStorage.getItem( 'token' );\r\n\r\n\r\n    public async getAll(){\r\n        try{\r\n            let vacancies = await axios.get( this.path );\r\n            return vacancies.data;\r\n        }\r\n        catch( error ){\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public async getById( id ){\r\n        try{\r\n            let vacancies = await axios.get( `${ this.path }/:${ id }` );\r\n            return vacancies.data;\r\n        }\r\n        catch( error ){\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public async create( body ){\r\n        try{\r\n            let vacancie = await axios.post( this.path, body, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${ this.token }`,\r\n                    'Content-Type' : 'application/json; multipart/form-data'\r\n                }\r\n            } );\r\n            return vacancie.data;\r\n        }\r\n        catch( error ){\r\n            debugger;\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public async edit( id, body ){\r\n        try{\r\n            let vacancie = await axios.put( `${ this.path }/${ id }`, body, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${ this.token }`,\r\n                    'Content-Type' : 'application/json; multipart/form-data'\r\n                }\r\n            } );\r\n            return vacancie.data\r\n        }\r\n        catch( error ){\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public async delete( id ){\r\n        try{\r\n            let deletedVacancie = await axios.delete( `${ this.path }/:${ id }` );\r\n            return deletedVacancie.data;\r\n        }\r\n        catch( error ){\r\n            return error;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { vacanciesStore } from '../../stores/vacancie.store';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n@observer\r\nexport class VacanciesList extends React.Component{\r\n    componentWillUnmount(){\r\n        vacanciesStore.category = \"\";\r\n    }\r\n    render(){\r\n        return <div className = \"conteiner\">\r\n                <ul className = \"vacancies-filter\">\r\n                    <li onClick = { e => vacanciesStore.vacanciesFilter( e, \"\", document.querySelectorAll(\".vacancies-filter>li\"), \"activeFilter\")}>All</li>\r\n                    <li onClick = { e => vacanciesStore.vacanciesFilter( e, \"design\", document.querySelectorAll(\".vacancies-filter>li\"), \"activeFilter\")}>Design</li>\r\n                    <li onClick = { e => vacanciesStore.vacanciesFilter( e, \"marketing\", document.querySelectorAll(\".vacancies-filter>li\"), \"activeFilter\")}>Marketing</li>\r\n                    <li onClick = { e => vacanciesStore.vacanciesFilter( e, \"web development\", document.querySelectorAll(\".vacancies-filter>li\"), \"activeFilter\")}>Web development</li>\r\n                </ul>\r\n            <div className = \"vacancies-block\">\r\n                <ul className = \"vacancies\">\r\n                    { vacanciesStore.vacancies.map( vacancie => {\r\n                        if( vacanciesStore.category === \"\" ){\r\n                            return <li key = { vacancie.id }><img src = { `../../../../${ vacancie.imagePath }` } alt = \"vacancie\" ></img><p className = \"content\">{ vacancie.title }</p>\r\n                            <NavLink to = {`/vacancies/${ vacancie.id }`} className = \"link\">Подробнее</NavLink></li>\r\n                        }\r\n                        else{\r\n                            return vacancie.category.toLowerCase() === vacanciesStore.category ? \r\n                            <li key = { vacancie.id }><p className = \"content\">{ vacancie.title }</p>\r\n                            <NavLink to = {`/vacancies/${ vacancie.id }`} className = \"link\">Подробнее</NavLink></li> : null\r\n                        }\r\n                        \r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport { VacanciesList } from './vacancies.list';\r\nimport '../vacancies.scss'\r\nimport { Footer } from '../shares/footer';\r\nimport { TopNavigation } from '../shares/top-navigation';\r\n\r\nexport class Vacancies extends React.Component{\r\n    render(){\r\n        return <div>\r\n            <TopNavigation/>\r\n            <div className = \"info\">\r\n                <h1>Актуальные вакансии</h1>\r\n                <p>В данном разделе представлены актуальные вакансии.\r\n                Для более детального подбора, в соответствии с вашими навыками и интересующими направлениями,\r\n                вы можете воспользоваться фильтром.</p>\r\n            </div>\r\n            <VacanciesList/>\r\n            <Footer/>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport { vacanciesStore } from '../../stores/vacancie.store';\r\nimport { CandidateForm } from '../shares/candidate-form';\r\nimport { observer } from 'mobx-react';\r\nimport { Footer } from '../shares/footer';\r\nimport { TopNavigation } from '../shares/top-navigation';\r\n\r\ninterface IProps{\r\n    match?: any;\r\n}\r\n\r\n@observer\r\nexport class Vacancie extends React.Component<IProps,{}>{\r\n    render(){\r\n        const vacancieId = this.props.match.params.id;\r\n        let vacancie;\r\n        for( let i = 0; i < vacanciesStore.vacancies.length; i++ ){\r\n            if( vacanciesStore.vacancies[i].id.toString() === vacancieId ){\r\n                vacancie = vacanciesStore.vacancies[i];\r\n                break;\r\n            }\r\n        }\r\n        if( vacancie === undefined)\r\n            return <h2>Вакансия не найдена</h2>;\r\n        else\r\n            return <div className = \"vacancie-window\">\r\n                <TopNavigation/>\r\n                <div className = \"vacancie-title\">\r\n                    <h1>{ vacancie.title }</h1>\r\n                        <p>В команду Remote Employees требуется { vacancie.title } для работы на иностранных проектах</p>\r\n                </div>\r\n                <CandidateForm/>\r\n                <Footer/>\r\n            </div>;\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n// import decodeJwt from 'jwt-decode';\r\n\r\nexport default {\r\n  login: ({ username, password }) =>  {\r\n    let body = { \r\n      login: username,\r\n      password: password\r\n    }\r\n    return axios.post('http://localhost:5000/login', body, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    }).then(res => {\r\n      if (res.data.error || res.status !== 200) {\r\n        throw new Error(res.data.error);\r\n      }\r\n      else {\r\n        const token = res.data;\r\n        localStorage.setItem('token', token);\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    return Promise.resolve();\r\n  },\r\n\r\n  checkError: ({ status }) => {\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem('token');\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  },\r\n\r\n  checkAuth: () => {\r\n    if( localStorage.getItem('token') )\r\n    {\r\n      return Promise.resolve()\r\n    }\r\n    else{\r\n      return Promise.reject();  \r\n    }\r\n  },\r\n\r\n  getPermissions: () => Promise.resolve(),\r\n};","import * as React from \"react\";\r\nimport { List, Datagrid, EditButton, TextField } from 'react-admin';\r\nimport { vacancieModel, vacanciesStore } from \"../../stores/vacancie.store\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n\r\nexport const VacancieList = props => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"title\" />\r\n            <TextField source=\"description\" />\r\n            <TextField source=\"category\" />\r\n            <EditButton />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\ninterface IVacancieProps{\r\n    match: any;\r\n}\r\n\r\n@observer\r\nexport class VacancieEdit extends React.Component<IVacancieProps, {}>{\r\nrender(){\r\n    let id = this.props.match.params.id;\r\n    return <form className = \"vacancie-form\">\r\n            <input type = \"text\" name = \"title\" placeholder = \"Title\" value = { vacancieModel.title }\r\n            onChange = { e => { vacancieModel.setTitle( e.target.value ) } }/>\r\n            <input type = \"text\" name = \"description\" placeholder = \"Description\" value = { vacancieModel.description }\r\n            onChange = { e => { vacancieModel.setDescription( e.target.value ) } }/>\r\n            <select name = \"category\" value = { vacancieModel.category }\r\n            onChange = { e => { vacancieModel.setCategory( e.target.value ) } }>\r\n                <option>Web development</option>\r\n                <option>Design</option>\r\n                <option>Marketing</option>\r\n            </select>\r\n            <input type = \"file\" name = \"image\" placeholder = \"Title\" onChange = { e => { vacancieModel.setImage(e.target.files[0] ) } }/>\r\n            <input type = \"submit\"\r\n            onClick = { e => vacanciesStore.editVacancie( e, id, vacancieModel.title, vacancieModel.description, vacancieModel.category, vacancieModel.image ) } value = \"Save\"/>\r\n        </form>\r\n    }\r\n}\r\n\r\nexport const VacancieCreate = observer(props => (\r\n    <form className = \"vacancie-form\">\r\n        <input type = \"text\" name = \"title\" placeholder = \"Title\" value = { vacancieModel.title }\r\n         onChange = { e => { vacancieModel.setTitle( e.target.value ) } }/>\r\n        <input type = \"text\" name = \"description\" placeholder = \"Description\" value = { vacancieModel.description }\r\n         onChange = { e => { vacancieModel.setDescription( e.target.value ) } }/>\r\n        <select name = \"category\" value = { vacancieModel.category }\r\n         onChange = { e => { vacancieModel.setCategory( e.target.value ) } }>\r\n            <option>Web development</option>\r\n            <option>Design</option>\r\n            <option>Marketing</option>\r\n        </select>\r\n        <input type = \"file\" name = \"image\" placeholder = \"Title\" onChange = { e => { vacancieModel.setImage(e.target.files[0] ) } }/>\r\n        <input type = \"submit\"\r\n         onClick = { e => vacanciesStore.createVacancie( e, vacancieModel.title, vacancieModel.description, vacancieModel.category, vacancieModel.image ) } value = \"Save\"/>\r\n    </form>\r\n))\r\n\r\n// export const VacancieCreate = props => (\r\n//     <Create {...props}>\r\n//         <SimpleForm encType=\"multipart/form-data\">\r\n//            <TextInput disabled source=\"id\" />\r\n//            <TextInput source=\"title\" />\r\n//            <TextInput multiline source=\"description\" />\r\n//            <SelectInput source=\"category\" choices={[\r\n//                 { id: 'web development', name: 'Web development' },\r\n//                 { id: 'design', name: 'Design' },\r\n//                 { id: 'marketing', name: 'Marketing' },\r\n//             ]} />\r\n//             <ImageInput source=\"image\" label=\"Related pictures\">\r\n//                 <ImageField source = \"src\"/>\r\n//             </ImageInput>\r\n//              </SimpleForm>\r\n//     </Create>\r\n// )\r\n\r\n","import * as React from \"react\";\r\nimport { List, Datagrid, EditButton, TextField } from 'react-admin';\r\n\r\n\r\nexport const CandidateList = props => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"fullName\" />\r\n            <TextField source=\"telephone\" />\r\n            <TextField source=\"vacancie\" />\r\n            <TextField source=\"cvLink\" />\r\n            <TextField source=\"testTaskLink\" />\r\n            <TextField source=\"howKnow\" />\r\n            <TextField source=\"message\" />\r\n            <EditButton />\r\n        </Datagrid>\r\n    </List>\r\n);","import React from 'react';\r\nimport jsonServerProvider from 'ra-data-json-server';\r\nimport { Admin, Resource, fetchUtils } from 'react-admin';\r\nimport authProvider from './auth-provider';\r\nimport { VacancieList, VacancieEdit, VacancieCreate } from './vacancie';\r\nimport { CandidateList } from './candidates';\r\nimport PostIcon from '@material-ui/icons/Book';\r\nimport UserIcon from '@material-ui/icons/Group';\r\n\r\n\r\nconst httpClient = (url, options: any = {}) => {\r\n  if (!options.headers) {\r\n      options.headers = new Headers({ Accept: 'application/json' });\r\n  }\r\n  const token = localStorage.getItem('token');\r\n  options.headers.set('Authorization', `Bearer ${token}`);\r\n  return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nconst dataProvider = jsonServerProvider( 'http://localhost:5000', httpClient );\r\n\r\n\r\nfunction AdminComponent( props ) {\r\n  return <Admin authProvider = { authProvider } dataProvider={dataProvider}>\r\n    <Resource name = \"vacancies\" list = { VacancieList } edit = { VacancieEdit } create = { VacancieCreate } icon = { PostIcon }/>\r\n    <Resource name = \"candidates\" list = { CandidateList } icon = { UserIcon }/>\r\n     {/* <Resource name=\"users\" list={ListGuesser} />\r\n     <Resource name=\"posts\" list={ListGuesser} /> */}\r\n  </Admin>\r\n}\r\n\r\nexport default AdminComponent;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router'\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Main } from './main.component';\r\nimport { Vacancies } from './vacancie/vacancies.component';\r\nimport './vacancies.scss';\r\nimport { vacanciesStore } from '../stores/vacancie.store';\r\nimport { Vacancie } from './vacancie/vacancie.item';\r\nimport AdminComponent from './admin/admin.component';\r\n\r\n\r\nexport class RouterComponent extends React.Component{\r\n    constructor( props ){\r\n        super( props );\r\n        vacanciesStore.getAllVacancies();\r\n    }\r\n    render(){\r\n        return <div>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path = \"/\" component = { Main }/>\r\n                    <Route exact path = \"/vacancies\" component = { Vacancies }/>\r\n                    <Route path = \"/vacancies/:id\" component = { Vacancie }/>\r\n                    <Route exact path = \"/admin\" component = { AdminComponent }/>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { RouterComponent } from './components/router.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <RouterComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}